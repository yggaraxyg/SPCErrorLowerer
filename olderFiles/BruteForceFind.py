import numpy as np
import matplotlib.pyplot as plt
import torch

def getError(LUMEN, DIST_NUM, DIST_MIN, DIST_MAX, NUMBER_OF_RUNS, LASER_REPETITION_PERIOD, LASER_TIME_PERIOD_BINS, LASWER_FWHM, val):
    #this does nothing right now
    return 0

def findBestInGroup(LUMEN, DIST_NUM, DIST_MIN, DIST_MAX, NUMBER_OF_RUNS, LASER_REPETITION_PERIOD, LASER_TIME_PERIOD_BINS, LASWER_FWHM, precisionDigits):
    mindex = 0
    minVal = 1
    curval
    for i in range((10**(precisionDigits+2))+1):
        curVal =getError(LUMEN, DIST_NUM, DIST_MIN, DIST_MAX, NUMBER_OF_RUNS, LASER_REPETITION_PERIOD, LASER_TIME_PERIOD_BINS, LASWER_FWHM,(i/10**(precisionDigits)))
        if(curVal<minVal):
            minVal=curVal
            mindex=i
    return [mindex , minval];
    
def main():
    LUMEN_MIN = 0
    LUMEN_MAX = 10000
    LUMEN_INT = 1

    DIST_NUM_MIN = 0
    DIST_NUM_MAX = 10
    DIST_NUM_INT = 1
    
    DIST_MIN_MIN = 0
    DIST_MIN_MAX = 1
    DIST_MIN_INT = 0.01
    
    DIST_MAX_MIN = 0
    DIST_MAX_MAX = 1
    DIST_MAX_INT = 0.01
    
    NUMBER_OF_RUNS_MIN = 1
    NUMBER_OF_RUNS_MAX = 100
    NUMBER_OF_RUNS_INT = 1
    
    LASER_REPETITION_PERIOD_MIN = 1
    LASER_REPETITION_PERIOD_MAX = 10000
    LASER_REPETITION_PERIOD_INT = 1
    
    LASER_TIME_PERIOD_BINS_MIN = 1
    LASER_TIME_PERIOD_BINS_MAX = 10000
    LASER_TIME_PERIOD_BINS_INT = 1
    
    LASER_FWHM_MIN = 1
    LASER_FWHM_MAX = 10
    LASER_FWHM_INT = 1
    
    LUMEN_BOX = int((LUMEN_MAX-LUMEN_MIN)/LUMEN_INT)
    DIST_NUM_BOX = int((DIST_NUM_MAX-DIST_NUM_MIN)/DIST_NUM_INT)
    DIST_MIN_BOX = int((DIST_MIN_MAX-DIST_MIN_MIN)/DIST_MIN_INT)
    DIST_MAX_BOX = int((DIST_MAX_MAX-DIST_MAX_MIN)/DIST_MAX_INT)
    NUMBER_OF_RUNS_BOX = int((NUMBER_OF_RUNS_MAX-NUMBER_OF_RUNS_MIN)/NUMBER_OF_RUNS_INT)
    LASER_REPETITION_PERIOD_BOX = int((LASER_REPETITION_PERIOD_MAX-LASER_REPETITION_PERIOD_MIN)/LASER_REPETITION_PERIOD_INT)
    LASER_TIME_PERIOD_BINS_BOX = int((LASER_TIME_PERIOD_BINS_MAX-LASER_TIME_PERIOD_BINS_MIN)/LASER_TIME_PERIOD_BINS_INT)
    LASER_FWHM_BOX = int((LASER_FWHM_MAX-LASER_FWHM_MIN)/LASER_FWHM_INT)

    optimalBlockage = [[[[[[[[0 for _ in range(LUMEN_BOX)] for _ in range(DIST_NUM_BOX)] for _ in range(DIST_MIN_BOX)] for _ in range(DIST_MAX_BOX)] for _ in range(NUMBER_OF_RUNS_BOX)] for _ in range(LASER_REPETITION_PERIOD_BOX)] for _ in range(LASER_TIME_PERIOF_BINS_BOX)] for _ in range(LASER_FWHM_BOX)]
    errorAtOptimal = [[[[[[[[0 for _ in range(LUMEN_BOX)] for _ in range(DIST_NUM_BOX)] for _ in range(DIST_MIN_BOX)] for _ in range(DIST_MAX_BOX)] for _ in range(NUMBER_OF_RUNS_BOX)] for _ in range(LASER_REPETITION_PERIOD_BOX)] for _ in range(LASER_TIME_PERIOF_BINS_BOX)] for _ in range(LASER_FWHM_BOX)]

    
    for LUMEN in range(LUMEN_BOX):
        for DIST_NUM in range(DIST_NUM_BOX):
            for DIST_MIN in range(DIST_MIN_BOX):
                for DIST_MAX in range(DIST_MAX_BOX):
                    for NUMBER_OF_RUNS in range(NUMBER_OF_RUNS_BOX):
                        for LASER_REPETITION_PERIOD in range(LASER_REPETITION_PERIOD_BOX):
                            for LASER_TIME_PERIOD_BINS in range(LASER_TIME_PERIOD_BINS_BOX):
                                for LASER_FWHM in range(LASER_FWHM_BOX):
                                    optimal = findBestInGroup((LUMEN_MIN+(LUMEN_INT*LUMEN)),(DIST_NUM_MIN+(DIST_NUM_INT*DIST_NUM)),(DIST_MIN_MIN+(DIST_MIN_INT*DIST_MIN)),(DIST_MAX_MIN+(DIST_MAX_INT*DIST_MAX)),(NUMBER_OF_RUNS_MIN+(NUMBER_OF_RUNS_INT*NUMBER_OF_RUNS)),(LASER_REPETITION_PERIOD_MIN+(LASER_REPETITION_PERIOD_INT*LASER_REPETITION_PERIOD)),(LASER_TIME_PERIOD_BINS_MIN+(LASER_TIME_PERIOD_BINS_INT*LASER_TIME_PERIOD_BINS)),(LASER_FWHM_MIN+(LASER_FWHM_INT*LASER_FWHM)), 6)
		                    optimalBlockage[LUMEN][DIST_NUM][DIST_MIN][DIST_MAX][NUMBER_OF_RUNS][LASER_REPETITION_PERIOD][LASER_TIME_PERIOD_BINS][LASER_FWHM] = optimal[0]
		                    errorAtOptimal[LUMEN][DIST_NUM][DIST_MIN][DIST_MAX][NUMBER_OF_RUNS][LASER_REPETITION_PERIOD][LASER_TIME_PERIOD_BINS][LASER_FWHM] = optimal[1]
		                    print("LUMEN: "+(LUMEN_MIN+(LUMEN_INT*LUMEN))+" DIST NUM: "+(DIST_NUM_MIN+(DIST_NUM_INT*DIST_NUM))+" DIST MIN: "+(DIST_MIN_MIN+(DIST_MIN_INT*DIST_MIN))+" DIST MAX: "+(DIST_MAX_MIN+(DIST_MAX_INT*DIST_MAX))+" NUMBER OF RUNS: "+(NUMBER_OF_RUNS_MIN+(NUMBER_OF_RUNS_INT*NUMBER_OF_RUNS))+" LASER REPETITION PERIOD: "+(LASER_REPETITION_PERIOD_MIN+(LASER_REPETITION_PERIOD_INT*LASER_REPETITION_PERIOD))+" LASER TIME PERIOD BINS: "+(LASER_TIME_PERIOD_BINS_MIN+(LASER_TIME_PERIOD_BINS_INT*LASER_TIME_PERIOD_BINS))+" LASER FWHM: "+(LASER_FWHM_MIN+(LASER_FWHM_INT*LASER_FWHM))+" Optimal Blockage: "+optimalBlockage[LUMEN][DIST_NUM][DIST_MIN][DIST_MAX][NUMBER_OF_RUNS][LASER_REPETITION_PERIOD][LASER_TIME_PERIOD_BINS][LASER_FWHM]+" Error at Optimal: "+errorAtOptimal[LUMEN][DIST_NUM][DIST_MIN][DIST_MAX][NUMBER_OF_RUNS][LASER_REPETITION_PERIOD][LASER_TIME_PERIOD_BINS][LASER_FWHM]+".")
    print("That's all folks!")

  
main()
